#!/bin/python3
# script to remove files encrypted and not even readable after restoring
import os
import sys
import shutil
import argparse

from cryptography.fernet import Fernet

def check_dir(dirPath):
        if os.path.exists(str(dirPath)):
            pass
        else:
            print(f'ERROR: File {dirPath} not exists. quitting')
            sys.exit()

def encrypt_data(fileData):
    key = Fernet.generate_key()
    fernet = Fernet(key)
    encryptedData = fernet.encrypt(fileData)
    return encryptedData

def remove_file(file):
        check_dir(file)
        with open (file, 'rb') as f:
            fileData = f.read()
        f.close()
        fileData = encrypt_data(fileData)
        with open (file, 'wb') as f:
            f.write(fileData)
        f.close()
        os.remove(file)
        print(f'removed {file} encrypted')
        
def remove_dir(file):                        
        for dirpath, dirname, dirfiles in os.walk(file):
            dirpath += '/'
            for file_name in dirfiles:
                file_name = dirpath + file_name
                with open (file_name, 'rb') as f:
                    fileData = f.read()
                f.close() 
                fileData = encrypt_data(fileData)
                with open (file_name, 'wb') as f:
                    f.write(fileData)
                f.close()
                os.remove(file_name)
                print(f'removed {file_name} encrypted')        
                
        shutil.rmtree(file)

def main():
    parser = argparse.ArgumentParser(description='rmsf deletes files or directories encrypted. There is no possibility to restore those files so be aware of using it.')
    parser.add_argument('-f', dest="file", help="deletes file")
    parser.add_argument('-r', dest="directory", help="deletes directory")
    args = parser.parse_args()
    
    if args.file:
        remove_file(args.file)
    else:
        remove_dir(args.directory)

if __name__ in "__main__":
    main()
